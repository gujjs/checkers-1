var CIRCLE_PER_ROW = 4;
var ROW = 3;
var SQUARE_NUM = 8;
var SQUARE_WIDTH = getWidth() / SQUARE_NUM;
var SQUARE_HEIGHT = SQUARE_WIDTH;
var RADIUS = SQUARE_WIDTH / 2 - SQUARE_WIDTH / 10;
var NUMB = 0;
var NUMW = 0;
var scoreW = 0;
var scoreB = 0;
var elem;
var destX;
var destY;
var outln;
var play = 0;

function start() {
    board();
    checkers();
    mouseClickMethod(selectCheckers);
}

function board() { //(ეს ფუნქცია დახატავს boardს რომელზეც იქნება შავ-თეთრი კვადრატები)

    var square_CIRCLE_NUMcolor;
    var bw = 0;
    var square_color;
    
    for( var i = 0; i < 8; i++ ){
    
    var squareY = i * SQUARE_HEIGHT;
    bw = i%2;
        
        for( var b = 0; b < SQUARE_NUM; b++ ){
            var squareX = b * SQUARE_WIDTH;
            if ( b%2 == bw ){
                square_color = Color.gray; 
            }else{
                square_color = Color.black;
            }
            drawSquare(squareX, squareY, square_color);

        }
    
    }

}
function drawSquare(x, y, color){
    var square = new Rectangle(SQUARE_WIDTH, SQUARE_HEIGHT);
    square.setPosition(x,y);
    square.setColor(color);
    add(square);
}
function checkers(){
    var circleY = SQUARE_WIDTH/2;
    
    for(var a = 0; a < ROW; a++){
        circleY = SQUARE_WIDTH / 2 + 2 * RADIUS * a + SQUARE_WIDTH / 10 * 2 * a;
        for(var c = 0; c < CIRCLE_PER_ROW; c++){
            if (a % 2 == 0){
                var circleX = SQUARE_WIDTH * 1.5 + c * SQUARE_WIDTH * 2;
            }else{
                var circleX = SQUARE_WIDTH * 0.5 + c * SQUARE_WIDTH * 2;
            }
            drawCircle( circleX, circleY, Color.white, RADIUS );
        
   
        }
    }
    var circleY = SQUARE_WIDTH * 5.5;
    for( var g = 0; g < ROW; g++ ){
        circleY = SQUARE_WIDTH * 5.5 + SQUARE_WIDTH * g;
        for( var k = 0; k < CIRCLE_PER_ROW; k++ ){
            
            if ( g % 2 == 0 ){
                var circleX = SQUARE_WIDTH * 0.5 + k * SQUARE_WIDTH * 2;
                
            }else{
                var circleX = SQUARE_WIDTH * 1.5 + k * SQUARE_WIDTH * 2;
            }
            drawCircle( circleX, circleY, Color.gray, RADIUS + 2 );
        }
    }
    var circleY = SQUARE_WIDTH * 5.5;
    for( var g = 0; g < ROW; g++ ){
        circleY = SQUARE_WIDTH * 5.5 + SQUARE_WIDTH * g;
        for(var k = 0; k < CIRCLE_PER_ROW; k++ ){
            
            if (g % 2 == 0){
                var circleX = SQUARE_WIDTH * 0.5 + k * SQUARE_WIDTH * 2;
                
            }else{
                var circleX = SQUARE_WIDTH * 1.5 + k * SQUARE_WIDTH * 2;
            }
            drawCircle(circleX, circleY, Color.black, RADIUS);
        }
    }
    
    
} //(ეს ფუნქცია შექმნის 12 შავ და 12 თეთრ დამკის ქვას, რომელიც იქნება თითოეული მოთამაშის ობიექტი)
function drawCircle(x, y, color, radius){
    var circle = new Circle(radius);
    circle.setPosition( x, y );
    circle.setColor(color);
    add(circle);
}
function selectCheckers(e){ //(ეს ფუნქცია აირჩევს მოთამაშის მიერ არჩეულ სათამაშო ქვას)
    var elem = getElementAt( e.getX(), e.getY() );
    //println(2);
    if(play % 2 == 0){
        selectWhite(elem);
    }
    else{
        selectBlack(elem);
    }
    
    ///////////////////////
    
}
function selectWhite(ELEMENT){
    //var num = 0;
    if( ELEMENT != null ){
        if( ELEMENT.getType() == "Circle" &&  ELEMENT.getColor() == "#FFFFFF" && NUMW % 2 == 0 ){
            ELEMENT.setColor(Color.green);
            checkersPath(ELEMENT);
            mouseClickMethod(moveCheckers);
            NUMW += 1;
            elem = ELEMENT;
        }else if( ELEMENT.getType() == "Circle" &&  ELEMENT.getColor() == "#00FF00" && NUMW % 2 == 1 ){
            ELEMENT.setColor(Color.white); 
            
            del(ELEMENT, "right", "white");
            del(ELEMENT, "left", "white");
            del(ELEMENT, "rightKill", "white");
            del(ELEMENT, "leftKill", "white");
            
            NUMW += 1; 
        }
    }
}
function selectBlack(ELEMENT){
    //var num;
    if( ELEMENT != null ){
        if( ELEMENT.getType() == "Circle" &&  ELEMENT.getColor() == "#000000" && NUMB % 2 == 0 ){
            ELEMENT.setColor(Color.green);
            checkersPath(ELEMENT);
            mouseClickMethod(moveCheckers);
            NUMB += 1;
            elem = ELEMENT;
        }else if( ELEMENT.getType() == "Circle" &&  ELEMENT.getColor() == "#00FF00" && NUMB % 2 == 1 ){
            ELEMENT.setColor(Color.black); 
            
            del(ELEMENT, "right", "black");
            del(ELEMENT, "left", "black");
            del(ELEMENT, "rightKill", "black");
            del(ELEMENT, "leftKill", "black");
            
            NUMB += 1; 
        }
    }
}
function del(ELEMENT, side, color){
    if( color == "black" && side == "leftKill"){
        var del_left_kill = getElementAt( ELEMENT.getX() - SQUARE_WIDTH * 2.5, ELEMENT.getY() - SQUARE_WIDTH * 1.5);
        ////println(del_left_kill.getColor());
        if(del_left_kill != null && del_left_kill.getColor() == "#FF0000"){
            remove(del_left_kill);    
        }
    }
    if( color == "black" && side == "rightKill"){
        var del_right_kill = getElementAt( ELEMENT.getX() + SQUARE_WIDTH * 2.5, ELEMENT.getY() - SQUARE_WIDTH * 1.5);
        
        if(del_right_kill != null && del_right_kill.getColor() == "#FF0000"){
            remove(del_right_kill);
        }
    }
    if( color == 'white' && side == "leftKill"){
        var del_left_kill = getElementAt( ELEMENT.getX() - SQUARE_WIDTH * 2.5, ELEMENT.getY() + SQUARE_WIDTH * 1.5);
        if(del_left_kill != null && del_left_kill.getColor() == "#FF0000"){
            remove(del_left_kill);
        }
    }
    if( color == 'white' && side == "rightKill"){
        var del_right_kill = getElementAt( ELEMENT.getX() + SQUARE_WIDTH * 2.5, ELEMENT.getY() + SQUARE_WIDTH * 1.5);
        if(del_right_kill != null && del_right_kill.getColor() == "#FF0000"){
            remove(del_right_kill);
        }
    }

    
    
    
    if( color == "black" && side == "right"){ 
        var del_right = getElementAt( ELEMENT.getX() + SQUARE_WIDTH * 0.5, ELEMENT.getY() - SQUARE_WIDTH * 1.5 );
                
        if(del_right != null && del_right.getType() == 'Rectangle' && del_right.getColor() == "#00FF00"){
            remove(del_right);
        }
    }
    if( color == "black" && side == "left" ){
        var del_left = getElementAt( ELEMENT.getX() - SQUARE_WIDTH * 1.5, ELEMENT.getY() - SQUARE_WIDTH * 1.5 );
    
        if( del_left != null && del_left.getType() == 'Rectangle' && del_left.getColor() == "#00FF00" ){
            remove(del_left);
        }
    }
    if( color == "white" && side == "right" ){
        var del_right = getElementAt( ELEMENT.getX() + SQUARE_WIDTH * 0.5, ELEMENT.getY() + SQUARE_WIDTH * 0.5 );
        
        if(del_right != null && del_right.getColor() == "#00FF00"){
            remove(del_right);
        }        
    }
    if( color == "white" && side == "right" ){
        var del_left = getElementAt( ELEMENT.getX()-SQUARE_WIDTH * 1.5, ELEMENT.getY() + SQUARE_WIDTH * 0.5 );
            
        if(del_left != null && del_left.getColor() == "#00FF00"){
            remove(del_left);
        }        
    }
}

function checkersPath(ELEMENT){ //(ეს ფუნქცია მოთამაშეს უჩვენებს სად შეუძლია მის არჩეულ ქვას გადაადგილება, ასევე თუ არსებობს მოწინააღმდეგის ქვა აჩვენებს მოთამაშეს ქვის მოკვლის შესაძლებლობას)
    var outline = getElementAt( ELEMENT.getX() + ELEMENT.getRadius() + 1, ELEMENT.getY());
    
    if( outline.getColor() == "#cccccc" ){
        var checkLeft_2 = getElementAt( ELEMENT.getX() - SQUARE_WIDTH * 2, ELEMENT.getY() - SQUARE_WIDTH * 2 );
        var checkRight_2 = getElementAt( ELEMENT.getX() + SQUARE_WIDTH * 2, ELEMENT.getY() - SQUARE_WIDTH * 2 );
        //drawSquare(ELEMENT.getX() - SQUARE_WIDTH * 2.5, ELEMENT.getY() - SQUARE_WIDTH * 2.5, Color.yellow );
        
        var checkLeft = getElementAt( ELEMENT.getX() - SQUARE_WIDTH, ELEMENT.getY() - SQUARE_WIDTH );
        var checkRight = getElementAt( ELEMENT.getX() + SQUARE_WIDTH, ELEMENT.getY() - SQUARE_WIDTH );
        
        if(checkLeft != null && checkLeft.getType() == "Rectangle"){
            drawSquare( ELEMENT.getX() - SQUARE_WIDTH * 1.5, ELEMENT.getY() - SQUARE_WIDTH * 1.5, Color.green );
        }
        if(checkLeft != null && checkLeft.getType() == "Circle" && checkLeft.getColor() == "#FFFFFF" && checkLeft_2 != null && checkLeft_2.getType() == "Rectangle"){
            drawSquare( ELEMENT.getX() - SQUARE_WIDTH * 2.5, ELEMENT.getY() - SQUARE_WIDTH * 2.5, Color.red );
        }
        
        if( checkRight != null && checkRight.getType() == "Rectangle" ){
            drawSquare( ELEMENT.getX() + SQUARE_WIDTH * 0.5, ELEMENT.getY() - SQUARE_WIDTH * 1.5, Color.green );
        }
        
        if( checkRight != null && checkRight.getType() == "Circle" && checkRight.getColor() == "#FFFFFF" && checkRight_2 != null && checkRight_2.getType() == "Rectangle"){
            drawSquare( ELEMENT.getX() + SQUARE_WIDTH * 1.5, ELEMENT.getY() - SQUARE_WIDTH * 2.5, Color.red );
        }

        
    }else{
        var checkLeft_2 = getElementAt( ELEMENT.getX() - SQUARE_WIDTH * 2 , ELEMENT.getY() + SQUARE_WIDTH * 2);
        var checkRight_2 = getElementAt( ELEMENT.getX() + SQUARE_WIDTH * 2, ELEMENT.getY() + SQUARE_WIDTH * 2);
        
        var checkLeft = getElementAt( ELEMENT.getX() - SQUARE_WIDTH, ELEMENT.getY() + SQUARE_WIDTH );
        var checkRight = getElementAt( ELEMENT.getX() + SQUARE_WIDTH, ELEMENT.getY() + SQUARE_WIDTH );
        
        if(checkLeft != null && checkLeft.getType() == "Rectangle"){
            drawSquare( ELEMENT.getX() - SQUARE_WIDTH * 1.5, ELEMENT.getY() + SQUARE_WIDTH * 0.5, Color.green );
            
        }
        
        if(checkRight != null && checkRight.getType() == "Rectangle" ){
            drawSquare( ELEMENT.getX() + SQUARE_WIDTH * 0.5, ELEMENT.getY() + SQUARE_WIDTH * 0.5, Color.green );
            
        }
        
        
        if(checkLeft != null && checkLeft.getType() == "Circle" && checkLeft.getColor() == '#000000' && checkLeft_2 != null && checkLeft_2.getType() == "Rectangle" ){

            drawSquare( ELEMENT.getX() - SQUARE_WIDTH * 2.5, ELEMENT.getY() + SQUARE_WIDTH * 1.5, Color.red );

        }

        if(checkRight != null && checkRight.getType() == "Circle" && checkRight.getColor() == '#000000' && checkRight_2 != null && checkRight_2.getType() == "Rectangle" ){
            drawSquare( ELEMENT.getX() + SQUARE_WIDTH * 1.5, ELEMENT.getY() + SQUARE_WIDTH * 1.5, Color.red );
        
        }

    }
}


function moveCheckers(e){ //outline, element, destinationX, destinationY ){ //(ეს ფუნქცია გადაადგილებს მოთამაშის მიერ არჩეულ ქვას შესაბამის ადგილას)
    var element = getElementAt( e.getX(), e.getY() );
    
    if( element.getType() == "Circle" && element.getColor() == "#00FF00" ){
        selectCheckers(element);
        //println('what to do now?');
        //elem = element;
        mouseClickMethod(selectCheckers);
    }    
    if( element.getType() == "Rectangle" && element.getColor() == "#00FF00" ){
        //println('YES BITCH!!!');
        destX = element.getX() + SQUARE_WIDTH / 2 ;
         
        outln = getElementAt( elem.getX() + RADIUS, elem.getY() );
        if( outln.getColor() == "#cccccc" ){
            elem.setColor(Color.black);
            del( elem, "right", "black" );
            del( elem, "left", "black" );
            del( elem, "rightKill", "black" );
            del( elem, "leftKill", "black" );
            play += 1;

            NUMB += 1; 
        }else if ( outln.getColor() == "#000000" ){
            elem.setColor(Color.white);
            del( elem, "right", "white" );
            del( elem, "left", "white" );
            del( elem, "rightKill", "white" );
            del( elem, "leftKill", "white" );
            play += 1;

            NUMW += 1;
        }
        setTimer( moveChecker, 1 );
    }
    if( element.getType() == "Rectangle" && element.getColor() == "#FF0000" ){
        //println('now try this');
        destX = element.getX() + SQUARE_WIDTH * 0.5 ;
        //println(element.getColor());
        outln = getElementAt( elem.getX() + RADIUS, elem.getY() );
        
        killCheckers()
    }
    
}
function moveChecker(){
    var dx = 2;
    var dy = 2;
    if( outln.getColor() == '#000000' &&  elem.getX() < destX ){
        elem.move( dx, dy );
            
    }else if( outln.getColor() == '#000000' &&  elem.getX() > destX ){
        elem.move( -dx, dy );
            
    }else if( outln.getColor() != '#000000' && elem.getX() < destX ){
        outln.move( dx, -dy );
        elem.move( dx, -dy );
        
    }else{
        outln.move( -dx, -dy );
        elem.move( -dx, -dy );
        //println(destX + ', ' + elem.getX());
    }
    
    if(elem.getX() == destX){
        stopTimer( moveChecker );
        mouseClickMethod(selectCheckers);
    }
}

function killCheckers(){ //თუ მოთამაშე გადაწყვეტს მოწინააღმეგის ფიგურის მოკვლას მაშინ გამოძახებული იქნება ეს ფუნქცია, ფუნქცია წაშლის მოწინააღმდეგის ქვას და გადაადგილებს მოთამაშის ქვას შესაბამის ადგილას, ასევე მოუმატებს მოთამაშეს ერთ ქულას)
    if( outln.getColor() == "#cccccc" ){
            elem.setColor(Color.black);
            del( elem, "right", "black" );
            del( elem, "left", "black" );
            del( elem, "rightKill", "black" );
            del( elem, "leftKill", "black" );
            play += 1;

            ////println('sss')
            removeOponent("black");
            scoreB += 1;
            NUMB += 1;
            checkWin()
            
        }else if ( outln.getColor() == "#000000" ){
            elem.setColor(Color.white);
            del( elem, "right", "white" );
            del( elem, "left", "white" );
            del( elem, "rightKill", "white" );
            del( elem, "leftKill", "white" );
            play += 1;

            removeOponent("white");
            scoreW += 1;
            NUMW += 1;
            checkWin()
        }
    setTimer( moveChecker, 1 );
    
}
function removeOponent(color){
    if (color == "white"){
        if (destX < elem.getX() ){
            remove(getElementAt( elem.getX() - SQUARE_WIDTH, elem.getY() + SQUARE_WIDTH ));
            remove(getElementAt( elem.getX() - SQUARE_WIDTH, elem.getY() + SQUARE_WIDTH ));
        }else{
            remove(getElementAt( elem.getX() + SQUARE_WIDTH, elem.getY() + SQUARE_WIDTH ));
            remove(getElementAt( elem.getX() + SQUARE_WIDTH, elem.getY() + SQUARE_WIDTH ));
        }
    }
    if( color == "black" ){
        if (destX < elem.getX() ){
            remove(getElementAt( elem.getX() - SQUARE_WIDTH, elem.getY() - SQUARE_WIDTH ));
        }else{
            remove(getElementAt( elem.getX() + SQUARE_WIDTH, elem.getY() - SQUARE_WIDTH ));
        }
    
    }

}


function checkWin(){ //(ეს ფუნქცია შეამოწმებს რომელიმე მხარეს თუ აქვს 12 ქულა და თუ ეს დადასტურდება , შესაბამის შემთხვევაში მოთამაშეს გამოცხადებს გამარჯვებულად და დაასრულებს თამაშს)
    if( scoreW == ROW * CIRCLE_PER_ROW ){
        var txt = new Text( "White Won!", "30pt Arial" );
        txt.setPosition( getWidth()/2 - txt.getWidth() / 2, getHeight()/2 - txt.getHeight() / 2 );
        var bg = new Rectangle( getWidth(), getHeight() );
        //bg.setPosition( getWidth()/2 - bg.getWidth() / 2, getHeight()/2 - bg.getHeight() );
        bg.setColor(Color.white);
        add(bg);
        add(txt);
        mouseClickMethod(empty);
    }else if( scoreB == ROW * CIRCLE_PER_ROW ){
        var txt = new Text( "Black Won!", "30pt Arial" );
        txt.setPosition( getWidth()/2 - txt.getWidth() / 2, getHeight()/2 - txt.getHeight() / 2 );
        var bg = new Rectangle( getWidth(), getHeight() );
        //bg.setPosition( getWidth()/2 - bg.getWidth() / 2, getHeight()/2 - bg.getHeight() );
        bg.setColor(Color.green);
        add(bg);
        add(txt);
        

    }
}
